https://www.baeldung.com/convert-pem-to-jks




https://www.baeldung.com/java-https-client-certificate-authentication



https://www.ibm.com/support/pages/how-generate-jks-keystore-existing-private-key



https://linuxhandbook.com/check-certificate-openssl/





https://github.com/gemfire/node-examples/tree/develop/ssl






# generate java keystore
keytool -v -genkeypair -keyalg RSA -dname "cn=xx, ou=xx, o=xx,L=xx, st=xx, c=CN" \
-ext SAN="DNS:localhost,IP:127.0.0.1,IP:1.1.1.1" \
-validity 365 \
-alias tls \
-keystore tls.keystore \
-keypass password \
-storepass password


# extract the cert from the java keystore
keytool -export -alias tls -file localhost.cer -keystore tls.keystore -storepass password


# import the cert to the java truststore
keytool -import -v -trustcacerts -alias tls -file localhost.cer -storepass password -keystore tls.truststore











tls.crt
tls.key




# convert openssl private key to keystore
openssl pkcs12 -export -in tls.crt  -inkey tls.key -out tls.p12





# convert openssl public cert to truststore
keytool -import -file tls.crt -alias tls -keystore tls.truststore -storepass password -noprompt






# convert keystore from pkcs12 format to jks format
keytool -importkeystore -srckeystore tls.jks -srcstoretype pkcs12 -destkeystore tls.jks



# covnert keystore from jks format to pkcs12 format
keytool -importkeystore -srckeystore tls.jks -destkeystore tls.p12 -deststoretype pkcs12






# how to check the java keystore and truststore
keytool -list -v -keystore <name-of-your-truststore-or-keystore>










