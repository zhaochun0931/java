What are the Java GC algorithms?

As of OpenJDK 22, there are 7 GC algorithms available:

Serial GC
Parallel GC
CMS GC (Concurrent Mark & Sweep)
G1 GC
ZGC
Shenandoah GC
Epsilon GC





java -Xms64m -Xmx64m -XX:+UseSerialGC -verbose:gc SerialGCDemo

java -Xms64m -Xmx64m -XX:+UseParallelGC -verbose:gc SerialGCDemo





The Java heap is made up of the Permanent, Old(tenured), and New (sometimes called Young) generations. 

The New generation is further made up of Eden space where objects are created and Survivor spaces S0 and S1 where they are kept later for a limited number of New generation garbage collection cycles.



The JVM divides the memory it manages in 3 major “generations”:
- Young Generation (or “New”)
- Old Generation (or “Tenured”)
- Permanent Generation


Young + Old = Total Heap


-Xmx
the maximum size of total heap memory

Default Young:Old ratio on 64-bit server JVM is 1:2

-Xms
The minimum size of total heap memory










The Young Generation is again divided in 3 “spaces”:
- Eden Space
- Survivor Space 0
- Survivor Space 1



-Xmn
the young generation heap space

-XX:SurvivorRatio=6 sets the ratio between each survivor space and eden space to be 1:6






The Young Generation is where all new objects are allocated and aged. When the young generation fills up, this causes a minor garbage collection. 
A young generation full of dead objects is collected very quickly. Some surviving objects are aged and eventually move to the old generation.



Stop the World Event - All minor garbage collections are "Stop the World" events. This means that all application threads are stopped until the operation completes. Minor garbage collections are always Stop the World events.



The Old Generation is used to store long surviving objects. Typically, a threshold is set for young generation object and when that age is met, the object gets moved to the old generation. Eventually, the old generation needs to be collected. This event is called a major garbage collection.

Major garbage collections are also Stop the World events. Often a major collection is much slower because it involves all live objects. So for Responsive applications, major garbage collections should be minimized. Also, note that the length of the Stop the World event for a major garbage collection is affected by the kind of garbage collector that is used for the old generation space.

The Permanent generation contains metadata required by the JVM to describe the classes and methods used in the application. The permanent generation is populated by the JVM at runtime based on classes in use by the application. In addition, Java SE library classes and methods may be stored here.

Classes may get collected (unloaded) if the JVM finds they are no longer needed and space may be needed for other classes. The permanent generation is included in a full garbage collection.





Garbage Collector Algorithms:
1. Parallel (PS – Parallel Scavenge)
  Two available for the Young Generation
  -XX:+UseParallelGC, cannot be used with CMS
  -XX:+UseParNewGC, for use with CMS

  One available for the Old Generation
  XX:+UseParallelOldGC

2. Concurrent (CMS – Concurrent Mark Sweep), Only for the Old Generation
  -XX:+UseConcMarkSweepGC

3. Serial, Only for the Old Generation


