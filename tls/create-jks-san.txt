Step 1: Create OpenSSL config file with SAN
Create a file called san.cnf:



You can add more IPs or DNS names if needed.

✅ Step 2: Generate private key and self-signed certificate


openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
  -keyout server.key -out server.crt \
  -config san.cnf



✅ Step 3: Create PKCS12 keystore

The Java keytool cannot directly import a standalone PEM private key. You must first combine the private key (mycert-key.pem) and certificate (mycert.pem) into a single PKCS#12 (.p12) file using OpenSSL.


Java keytool can’t import PEM cert + key directly — first convert to PKCS#12:


openssl pkcs12 -export \
  -in server.crt \
  -inkey server.key \
  -out keystore.p12 \
  -name myalias \
  -passout pass:changeit



✅ Step 4: Import into Java JKS keystore

keytool -importkeystore \
  -deststorepass changeit \
  -destkeypass changeit \
  -destkeystore keystore.jks \
  -srckeystore keystore.p12 \
  -srcstoretype PKCS12 \
  -srcstorepass changeit \
  -alias myalias




✅ Step 5: Create a truststore (for the client)
If the client needs to trust this cert, import the server.crt into a truststore:


keytool -import \
  -alias myserver \
  -file server.crt \
  -keystore truststore.jks \
  -storepass changeit \
  -noprompt
