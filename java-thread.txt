Most Java applications are multithreaded in nature, consisting of multiple components, performing specific tasks, and executed in different threads. However, the underlying operating system (OS) imposes a cap on the maximum number of threads that a Java application can create.

The JVM throws an unable to create new native thread error when the JVM asks the underlying OS for a new thread, and the OS is incapable of creating new kernel threads also known as OS or system threads.  The sequence of events is as follows:

An application running inside the Java Virtual Machine (JVM) requests for a new thread
The JVM native code sends a request to the OS to create a new kernel thread
The OS attempts to create a new kernel thread which requires memory allocation
The OS refuses native memory allocation because either
The requesting Java process has exhausted its memory address space
The OS has depleted its virtual memory
The Java process then returns the java.lang.OutOfMemoryError: unable to create new native thread error

  
  
Thread Allocation Model
An OS typically has two types of threads – user threads (threads created by a Java application) and kernel threads. User threads are supported above the kernel threads and the kernel threads are managed by the OS.

Between them, there are three common relationships:

Many-To-One – Many user threads map to a single kernel thread
One-To-One – One user thread map to one kernel thread
Many-To-Many – Many user threads multiplex to a smaller or equal number of kernel threads



  
Threads in Java are typically mapped to native operating system threads, and the JVM will run into this error when it tries to create too many threads beyond the system or JVM limits (like the ulimit on Linux).




Java Threads vs. OS Threads



Java Threads: Java provides its own threading model that runs on top of the native operating system threads. When you create a thread in Java, it's managed by the Java Virtual Machine (JVM). Java threads are essentially lightweight abstractions that are mapped to native OS threads by the JVM.

OS Threads (Native Threads): Native threads are operating system-level threads that the OS kernel schedules and manages. These are the actual threads that execute on the processor. When a Java thread is created, it maps to a native thread, and the OS manages its execution.






The two key factors that contribute to OutOfMemoryError: unable to create new native thread are:

Thread Stack Size: Each thread in Java consumes a portion of memory for its stack. Reducing the stack size can allow you to create more threads, but it will also reduce the available memory for other processes.
System Resources and Limits: The system (operating system or JVM) has limits on how many threads it can create, usually governed by the available memory and the ulimit settings (on Linux, for example).


Steps to Set the JVM Arguments to Trigger the OOM Error:
You can configure the Java application to run into the OutOfMemoryError by tweaking the following settings:

Reduce the JVM Heap Memory (-Xmx), making sure you leave less memory for thread stacks.
Reduce the Thread Stack Size (-Xss), to make the threads use less memory per thread, allowing more to be created before running out of memory.
Set Maximum Threads (ulimit) to a very low value, so the OS imposes a strict limit on the number of threads you can create.






By adjusting the heap size (-Xmx), thread stack size (-Xss), and system thread limits (ulimit), you can simulate an OutOfMemoryError due to thread creation in Java. 





