Young Generation Collection, also called a Minor GC. The Young Generation is divided into 3 areas: Eden, Survivor Space 'From' and Survivor Space 'To'.


In order to make Minor GC more efficient, the Young Generation in HotSpot is further divided into 3 areas:
1. Eden - Stores newly allocated objects with a larger space.
2. Survivor Space "From" - Stores objects that survived at least one Minor Collection with a smaller space.
3. Survivor Space "To" - Empty space reserved as working space for the garbage collector with same space size as Survivor Space "From".



There are 6 basic steps involved in a Minor GC:
1. Determine each object in the Young Generation is live or dead.
2. Live objects in the Eden area are copied to the Survivor Space "To" area.
3. Live objects in the Survivor Space "From" area that are old enough to be promoted are copied to the Tenured Generation.
4. Live objects in the Survivor Space "From" area that are not old enough to be promoted are copied to the Survivor Space "To" area.
5. Remove all dead objects to make the Eden area and the Survivor Space "From" area empty.
6. Swap the label between the Survivor Space "From" area and the Survivor Space "To" area, so the Survivor Space "To" area is empty.

The picture below illustrates basic steps of a Minor GC in HotSpot JVM:
HotSpot-Young-Generation-Collection.jpg




This section describes Garbage Collectors used for the Young generation: Serial, Parallel Scavenge (PS), Parallel New (ParNew), and Garbage First (G1).

There are 4 primary garbage collectors for the Young (new) generation based on the algorithm used to perform the GC task:

1. Serial Collector (invoked by "-XX:+UseSerialGC" option) - The Serial collector for Young generation uses the "Copy (also called Scavenge)" algorithm serially using 1 CPU processor (1 thread) only in a stop-the-world fashion:

Copy live objects from "eden" to "from" space, when "eden" space is full.
Empty "eden" space. Dead objects are wiped out.
Copy live objects from "from" to "to" space, when "from" space is full.
Empty "from" space. Dead objects are wiped out.
Copy live objects from "to" space to "tenured" generation, when "to" space is full or the live object is getting too old.
Swap "from" and "to" spaces".

The Serial collector for Young (new) generation can be identified in GC log messages with the "DefNew" label, as in this example: "[DefNew: 182861K->22538K(206464K), 0.0442227 secs]".





2. Parallel Scavenge (PS) (also called "PS Scavenge") Collector (invoked by "-XX:+UseParallelGC" option) - The PS collector for Young generation uses the "Copy (also called Scavenge)" algorithm parallelly using multiple CPU processors (multiple threads) in a stop-the-world fashion.

The PS collector for Young (new) generation uses the same algorithm as the Serial collector, except that it uses multiple threads to get the job done faster.

The PS collector for Young (new) generation can be identified in GC log messages with the "PSYoungGen" label, as in this example: "[PSYoungGen: 179654K->29760K(209920K)]".



3. Parallel New (ParNew) Collector (invoked by "-XX:+UseParNewGC" option) - The ParNew collector for Young generation uses the "Copy (also called Scavenge)" algorithm parallelly using multiple CPU processors (multiple threads) in a stop-the-world fashion.

The PS collector for Young (new) generation uses the same algorithm as the PS collector, except that it has an internal 'callback' that allows an old generation collector to operate on the objects it collects (really written to work with the concurrent collector), as described by Jack Shirazi in "Oracle JVM Garbage Collectors Available From JDK 1.7.0_04 And After".

The ParNew collector for Young (new) generation can be identified in GC log messages with the "ParNew" label, as in this example: "[ParNew: 1068K->63K(1152K), 0.0024959 secs]".




4. Garbage First (G1) Collector (invoked by "-XX:+UseG1GC" option) - The G1 collector divides the heap into 3 types of regions: Eden, Survivor and Tenured.

During each Young generation GC, the G1 collector loops through all existing Eden and Survivor regions to mark all live objects. Then it copies all live objects younger than the tenuring threshold to new Survivor regions. Older objects are copied to new Tenured regions.

The G1 collector for Young (new) generation can be identified in GC log messages with the "G1 Evacuation Pause" label, as in this example: "[GC pause (G1 Evacuation Pause) (young), 0.0096376 secs]".






